[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbvoc: Ontology Development with nbdev",
    "section": "",
    "text": "pip install git+https://github.com/charlesvardeman/nbvoc.git",
    "crumbs": [
      "nbvoc: Ontology Development with nbdev"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "nbvoc: Ontology Development with nbdev",
    "section": "",
    "text": "pip install git+https://github.com/charlesvardeman/nbvoc.git",
    "crumbs": [
      "nbvoc: Ontology Development with nbdev"
    ]
  },
  {
    "objectID": "index.html#what-is-nbvoc",
    "href": "index.html#what-is-nbvoc",
    "title": "nbvoc: Ontology Development with nbdev",
    "section": "What is nbvoc?",
    "text": "What is nbvoc?\nnbvoc combines the literate programming approach of nbdev with ontology development, allowing you to:\n\nWrite ontologies in notebooks using Markdown-LD or Turtle syntax\nTest your ontologies with example data\nExport to various RDF formats (Turtle, JSON-LD, etc.)\nGenerate documentation that explains your ontology design decisions",
    "crumbs": [
      "nbvoc: Ontology Development with nbdev"
    ]
  },
  {
    "objectID": "index.html#basic-usage",
    "href": "index.html#basic-usage",
    "title": "nbvoc: Ontology Development with nbdev",
    "section": "Basic Usage",
    "text": "Basic Usage\n\nCreating an Ontology Notebook\nYour ontology can be defined in two ways:\n\nOption 1: Using Code Cells with Turtle Syntax\nCreate a code cell with valid Python that loads or processes Turtle data:\n\n# Define Turtle content as a Python string\nturtle_data = \"\"\"\n@prefix ex: &lt;http://example.org/example#&gt; .\n@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .\n@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .\n\nex:Person a rdfs:Class ;\n    rdfs:label \"Person\" ;\n    rdfs:comment \"A person in the example domain.\" .\n\nex:name a rdf:Property ;\n    rdfs:domain ex:Person ;\n    rdfs:range rdfs:Literal ;\n    rdfs:label \"name\" ;\n    rdfs:comment \"The name of a person.\" .\n\"\"\"\n\n# You can optionally load this into a graph\nfrom rdflib import Graph\ng = Graph()\ng.parse(data=turtle_data, format=\"turtle\")\n\n&lt;Graph identifier=N34e2386c9d184d3c98addd8d2b3a8c29 (&lt;class 'rdflib.graph.Graph'&gt;)&gt;\n\n\n\n\nOption 2: Using Markdown Cells with Markdown-LD\nCreate a Markdown cell with Markdown-LD syntax:\n# Example Ontology\n@prefix ex: http://example.org/example# . @prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . @prefix owl: http://www.w3.org/2002/07/owl# .\n\n## Organization\n\n`ex:Organization`\n\nex:Organization a rdfs:Class ; rdfs:label “Organization” ; rdfs:comment “An organization such as a company or institution.” .\n\n### has name\n\n`ex:name`\n\n- `rdfs:Literal`\n\n### has member\n\n`ex:hasMember`\n\n- `ex:Person`\nAnd add a directive in a code cell before or after the Markdown cell:\n#| export_mdld\n# This cell marks the adjacent Markdown cell for export",
    "crumbs": [
      "nbvoc: Ontology Development with nbdev"
    ]
  },
  {
    "objectID": "core.html#ontologygraph",
    "href": "core.html#ontologygraph",
    "title": "Ontology Extension for nbdev",
    "section": "OntologyGraph",
    "text": "OntologyGraph\n\nsource\n\nOntologyGraph\n\n OntologyGraph ()\n\nBuilds and manages the RDF graph for ontology content\n\n# Test basic functionality of OntologyGraph\ntest_graph = OntologyGraph()\ntest_turtle = \"\"\"\n@prefix ex: &lt;http://example.org/&gt; .\nex:Subject ex:predicate \"object\" .\n\"\"\"\ntest_graph._add_turtle(test_turtle)\ntest_eq(len(test_graph.graph), 1)\nserialized = test_graph.serialize(format=\"turtle\")\ntest_eq(\"ex:Subject\" in serialized, True)",
    "crumbs": [
      "Ontology Extension for nbdev"
    ]
  },
  {
    "objectID": "core.html#ontology-maker",
    "href": "core.html#ontology-maker",
    "title": "Ontology Extension for nbdev",
    "section": "Ontology Maker",
    "text": "Ontology Maker\nOntologyMaker class that will handle exporting the graph to files\n\nsource\n\nOntologyMaker\n\n OntologyMaker (dest, name, format='turtle')\n\nExport ontology graph to various formats\n\nsource\n\n\nextract_prefixes\n\n extract_prefixes (ast)\n\nExtract prefixes and base URI from a Markdown-ld AST.\n\nsource\n\n\nextract_triples\n\n extract_triples (ast)\n\nExtract RDF triples from a Markdown-ld AST.\n\nsource\n\n\nmarkdown_ld_to_triples\n\n markdown_ld_to_triples (markdown_text)\n\nConvert Markdown-LD text to RDF triples.\n\n# Test with Markdown-LD\ntest_mdld = \"\"\"\n# Test Ontology\n\n```\n@prefix ex: &lt;http://example.org/&gt; .\n@base &lt;http://example.org/base/&gt; .\n```\n\n## TestClass\n\n`ex:TestClass`\n\n```\nex:TestClass a owl:Class .\n```\n\n### has property\n\n`ex:hasProperty`\n\n- `\"test value\"`\n\"\"\"\n\n\ntest_graph = OntologyGraph()\ntest_graph._add_markdown_ld(test_mdld)\ntest_eq(len(test_graph.graph) &gt; 0, True)\n\n\nsource\n\n\nOntologyProcessor\n\n OntologyProcessor (nb)\n\nProcess cells with ontology directives\n\n# Test OntologyProcessor with a notebook cell\nimport nbformat\nfrom execnb.nbio import NbCell\n\n# Create a test cell using nbformat first\nnb_cell = nbformat.v4.new_code_cell(source=\"\"\"\n@prefix ex: &lt;http://example.org/&gt; .\nex:TestSubject ex:testPredicate \"test object\" .\n\"\"\")\n\n# Now create a NbCell with the required arguments\ntest_cell = NbCell(0, nb_cell)  # idx=0, cell=nb_cell\ntest_cell.directives_ = {'export_ttl': []}\n\n# Create a processor and process the cell\nprocessor = OntologyProcessor(None)  # nb parameter not used in this test\nprocessor._export_ttl_(test_cell)\n\n# Check if the triple was added to the graph\ntest_eq(len(processor.graph.graph), 1)\n\n\n# Test OntologyMaker\nimport tempfile\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    # Create a graph with a test triple\n    test_graph = OntologyGraph()\n    test_graph._add_turtle(\"\"\"\n    @prefix ex: &lt;http://example.org/&gt; .\n    ex:TestSubject ex:testPredicate \"test object\" .\n    \"\"\")\n    \n    # Export the graph\n    maker = OntologyMaker(tmpdir, \"test_ontology\")\n    filepath = maker.make(test_graph.graph)  # Note: We pass the RDFLib graph, not the OntologyGraph\n    \n    # Check that the file was created and contains our triple\n    test_eq(Path(filepath).exists(), True)\n    with open(filepath, 'r') as f:\n        content = f.read()\n    test_eq(\"TestSubject\" in content, True)\n\n\nsource\n\n\nprocess_ontology_notebook\n\n process_ontology_notebook (nb_path, output_dir=None, formats=None)\n\n*Process a notebook and export ontology content to files.\nArgs: nb_path: Path to the notebook output_dir: Directory to output the ontology files (defaults to same dir as notebook) formats: List of output formats (defaults to [“turtle”])\nReturns: Dictionary mapping formats to output file paths*\n\n# Test process_ontology_notebook with the correct string to check\nimport nbformat\nimport tempfile\nfrom pathlib import Path\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    # Create a test notebook\n    nb = nbformat.v4.new_notebook()\n    \n    # Add a cell with Turtle content\n    cell = nbformat.v4.new_code_cell(source=\"\"\"#| export_ttl\n@prefix ex: &lt;http://example.org/&gt; .\nex:TestSubject ex:testPredicate \"test object\" .\n\"\"\")\n    nb.cells.append(cell)\n    \n    # Write the notebook to a file\n    nb_path = Path(tmpdir) / \"test_ontology.ipynb\"\n    with open(nb_path, 'w') as f:\n        nbformat.write(nb, f)\n    \n    # Process the notebook\n    results = process_ontology_notebook(nb_path)\n    \n    # Check that the output file was created\n    test_eq(len(results), 1)\n    test_eq(\"turtle\" in results, True)\n    test_eq(Path(results[\"turtle\"]).exists(), True)\n    \n    # Check the content\n    with open(results[\"turtle\"], 'r') as f:\n        content = f.read()\n    \n    # Print the content for debugging\n    print(\"File content:\")\n    print(content)\n    \n    # Check for the correct string pattern\n    test_eq(\"ex:TestSubject\" in content, True)\n\nFile content:\n@prefix ex: &lt;http://example.org/&gt; .\n\nex:TestSubject ex:testPredicate \"test object\" .\n\n\n\n\n\nsource\n\n\nnbvoc_export\n\n nbvoc_export (path:str=None, recursive:bool=True, formats:str='turtle',\n               output_dir:str=None)\n\nExport ontology content from notebooks\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npath\nstr\nNone\nPath to notebook or directory containing notebooks (default: current dir)\n\n\nrecursive\nbool\nTrue\nSearch recursively in directories\n\n\nformats\nstr\nturtle\nOutput formats (comma-separated list)\n\n\noutput_dir\nstr\nNone\nOutput directory (default: ontology_path from settings.ini)\n\n\n\n\n# Test the CLI function with directory structure preservation\nimport tempfile\nimport nbformat\nimport os\nfrom pathlib import Path\nimport shutil\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    tmp_path = Path(tmpdir)\n    \n    # Create a directory structure\n    notebooks_dir = tmp_path / \"notebooks\"\n    notebooks_dir.mkdir()\n    \n    subdir1 = notebooks_dir / \"module1\"\n    subdir1.mkdir()\n    \n    subdir2 = notebooks_dir / \"module2\" / \"submodule\"\n    subdir2.mkdir(parents=True)\n    \n    # Create test notebooks in different directories\n    nb1 = nbformat.v4.new_notebook()\n    cell1 = nbformat.v4.new_code_cell(source=\"\"\"#| export_ttl\n@prefix ex: &lt;http://example.org/&gt; .\nex:Module1 ex:hasProperty \"value1\" .\n\"\"\")\n    nb1.cells.append(cell1)\n    \n    nb2 = nbformat.v4.new_notebook()\n    cell2 = nbformat.v4.new_code_cell(source=\"\"\"#| export_ttl\n@prefix ex: &lt;http://example.org/&gt; .\nex:Module2 ex:hasProperty \"value2\" .\n\"\"\")\n    nb2.cells.append(cell2)\n    \n    # Write notebooks to their respective directories\n    nb_path1 = subdir1 / \"ontology1.ipynb\"\n    with open(nb_path1, 'w') as f:\n        nbformat.write(nb1, f)\n    \n    nb_path2 = subdir2 / \"ontology2.ipynb\"\n    with open(nb_path2, 'w') as f:\n        nbformat.write(nb2, f)\n    \n    # Create output directory\n    ontology_dir = tmp_path / \"ontology\"\n    \n    # Run the export function\n    print(\"\\nTesting export with directory structure preservation:\")\n    current_dir = os.getcwd()\n    try:\n        # Change to the temp directory to test relative paths\n        os.chdir(tmp_path)\n        nbvoc_export(\"notebooks\", output_dir=\"ontology\", formats=\"turtle\")\n    finally:\n        # Change back to original directory\n        os.chdir(current_dir)\n    \n    # Check output directory structure\n    expected_files = [\n        ontology_dir / \"module1\" / \"ontology1.ttl\",\n        ontology_dir / \"module2\" / \"submodule\" / \"ontology2.ttl\"\n    ]\n    \n    for file_path in expected_files:\n        print(f\"Checking if {file_path} exists...\")\n        test_eq(file_path.exists(), True)\n        \n        # Verify content\n        content = file_path.read_text()\n        if \"Module1\" in content:\n            test_eq(\"ex:Module1\" in content, True)\n        elif \"Module2\" in content:\n            test_eq(\"ex:Module2\" in content, True)\n    \n    print(\"Directory structure test passed!\")\n\n\nTesting export with directory structure preservation:\nExported ontology2.ipynb to: ontology/module2/submodule/ontology2.ttl\nExported ontology1.ipynb to: ontology/module1/ontology1.ttl\nChecking if /tmp/tmpaizneeos/ontology/module1/ontology1.ttl exists...\nChecking if /tmp/tmpaizneeos/ontology/module2/submodule/ontology2.ttl exists...\nDirectory structure test passed!\n\n\n\n# Test the CLI function with directory structure preservation\nimport tempfile\nimport nbformat\nimport os\nfrom pathlib import Path\nimport shutil\n\nwith tempfile.TemporaryDirectory() as tmpdir:\n    tmp_path = Path(tmpdir)\n    \n    # Create a directory structure\n    notebooks_dir = tmp_path / \"notebooks\"\n    notebooks_dir.mkdir()\n    \n    subdir1 = notebooks_dir / \"module1\"\n    subdir1.mkdir()\n    \n    subdir2 = notebooks_dir / \"module2\" / \"submodule\"\n    subdir2.mkdir(parents=True)\n    \n    # Create test notebooks in different directories\n    nb1 = nbformat.v4.new_notebook()\n    cell1 = nbformat.v4.new_code_cell(source=\"\"\"#| export_ttl\n@prefix ex: &lt;http://example.org/&gt; .\nex:Module1 ex:hasProperty \"value1\" .\n\"\"\")\n    nb1.cells.append(cell1)\n    \n    nb2 = nbformat.v4.new_notebook()\n    cell2 = nbformat.v4.new_code_cell(source=\"\"\"#| export_ttl\n@prefix ex: &lt;http://example.org/&gt; .\nex:Module2 ex:hasProperty \"value2\" .\n\"\"\")\n    nb2.cells.append(cell2)\n    \n    # Write notebooks to their respective directories\n    nb_path1 = subdir1 / \"ontology1.ipynb\"\n    with open(nb_path1, 'w') as f:\n        nbformat.write(nb1, f)\n    \n    nb_path2 = subdir2 / \"ontology2.ipynb\"\n    with open(nb_path2, 'w') as f:\n        nbformat.write(nb2, f)\n    \n    # Create output directory\n    ontology_dir = tmp_path / \"ontology\"\n    \n    # Run the export function\n    print(\"\\nTesting export with directory structure preservation:\")\n    current_dir = os.getcwd()\n    try:\n        # Change to the temp directory to test relative paths\n        os.chdir(tmp_path)\n        nbvoc_export(\"notebooks\", output_dir=\"ontology\", formats=\"turtle\")\n    finally:\n        # Change back to original directory\n        os.chdir(current_dir)\n    \n    # Check output directory structure - updated paths\n    expected_files = [\n        ontology_dir / \"module1\" / \"ontology1.ttl\",\n        ontology_dir / \"module2\" / \"submodule\" / \"ontology2.ttl\"\n    ]\n    \n    for file_path in expected_files:\n        print(f\"Checking if {file_path} exists...\")\n        test_eq(file_path.exists(), True)\n        \n        # Verify content\n        content = file_path.read_text()\n        if \"Module1\" in str(file_path):\n            test_eq(\"ex:Module1\" in content, True)\n        elif \"Module2\" in str(file_path):\n            test_eq(\"ex:Module2\" in content, True)\n    \n    print(\"Directory structure test passed!\")\n\n\nTesting export with directory structure preservation:\nExported ontology2.ipynb to: ontology/module2/submodule/ontology2.ttl\nExported ontology1.ipynb to: ontology/module1/ontology1.ttl\nChecking if /tmp/tmpvyd10q7n/ontology/module1/ontology1.ttl exists...\nChecking if /tmp/tmpvyd10q7n/ontology/module2/submodule/ontology2.ttl exists...\nDirectory structure test passed!",
    "crumbs": [
      "Ontology Extension for nbdev"
    ]
  }
]